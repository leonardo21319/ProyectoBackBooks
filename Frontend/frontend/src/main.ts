// ============================================
// üìÅ ACTUALIZAR: Frontend/frontend/src/main.ts
// ============================================

import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideRouter } from '@angular/router';
import { routes } from './app/routes';
import { appConfig } from './app/app.config';
import { environment } from './environments/environments'; // ‚úÖ Ruta correcta

// ‚úÖ Log de inicio de aplicaci√≥n
console.log('üöÄ', environment.appName, 'iniciando...');

// ‚úÖ Informaci√≥n del environment (solo en desarrollo)
if (environment.enableLogging) {
  console.log('üìã Configuraci√≥n:');
  console.log('   üì° API URL:', environment.apiUrl);
  console.log('   üîß Environment:', environment.production ? 'PRODUCTION' : 'DEVELOPMENT');
  console.log('   üì± App:', environment.appName);
  console.log('   üìä Version:', environment.version);
  console.log('   üïê Cache Timeout:', environment.cacheTimeout + 'ms');
  console.log('   ‚è±Ô∏è  Request Timeout:', environment.requestTimeout + 'ms');
}

bootstrapApplication(AppComponent, {
  providers: [provideRouter(routes), appConfig.providers],
})
.then(() => {
  console.log('‚úÖ', environment.appName, 'iniciado correctamente');
  
  // ‚úÖ Solo en desarrollo: mostrar info adicional
  if (environment.debugMode) {
    console.log('üõ†Ô∏è  Modo debug activado');
    console.log('üîç Logging habilitado:', environment.enableLogging);
    console.log('üìã Endpoints disponibles:', environment.endpoints);
  }
})
.catch((err) => {
  console.error('‚ùå Error al iniciar', environment.appName + ':', err);
  
  // ‚úÖ Mostrar ayuda para debugging
  if (environment.debugMode) {
    console.log('üÜò Posibles soluciones:');
    console.log('   1. Verificar que todos los m√≥dulos est√©n importados');
    console.log('   2. Revisar la configuraci√≥n de rutas');
    console.log('   3. Verificar la configuraci√≥n de providers');
  }
});